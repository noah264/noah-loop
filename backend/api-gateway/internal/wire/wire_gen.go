// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject

package wire

import (
	"github.com/noah-loop/backend/api-gateway/internal/application/service"
	"github.com/noah-loop/backend/api-gateway/internal/infrastructure/config"
	"github.com/noah-loop/backend/api-gateway/internal/infrastructure/repository"
	"github.com/noah-loop/backend/api-gateway/internal/interface/http/handler"
	"github.com/noah-loop/backend/api-gateway/internal/interface/http/router"
	"github.com/noah-loop/backend/shared/pkg/infrastructure"
)

// Injectors from wire.go:

func InitializeGatewayApp() (*GatewayApp, func(), error) {
	infrastructureConfig, err := infrastructure.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, err := infrastructure.ProvideLogger(infrastructureConfig)
	if err != nil {
		return nil, nil, err
	}
	metricsRegistry := infrastructure.ProvideMetrics("gateway", logger)
	configAdapter := config.NewConfigAdapter(infrastructureConfig)
	serviceRepository := repository.NewInMemoryServiceRepository()
	gatewayService := service.NewGatewayService(configAdapter, serviceRepository, logger, metricsRegistry)
	gatewayHandler := handler.NewGatewayHandler(gatewayService, logger)
	routerRouter := router.NewRouter(gatewayService, logger, metricsRegistry)
	gatewayApp := &GatewayApp{
		GatewayService: gatewayService,
		Handler:        gatewayHandler,
		Router:         routerRouter,
		Metrics:        metricsRegistry,
		Config:         infrastructureConfig,
	}
	return gatewayApp, func() {
	}, nil
}
