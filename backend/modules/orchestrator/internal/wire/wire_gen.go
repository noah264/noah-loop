// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject

package wire

import (
	"github.com/noah-loop/backend/modules/orchestrator/internal/application/service"
	httpHandler "github.com/noah-loop/backend/modules/orchestrator/internal/interface/http"
	"github.com/noah-loop/backend/shared/pkg/infrastructure"
)

// Injectors from wire.go:

func InitializeOrchestratorApp() (*OrchestratorApp, func(), error) {
	config, err := infrastructure.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, err := infrastructure.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	database, err := infrastructure.ProvideDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	metricsRegistry := infrastructure.ProvideMetrics("orchestrator", logger)
	orchestratorService := NewOrchestratorServiceStub(logger, metricsRegistry)
	orchestratorHandler := httpHandler.NewOrchestratorHandler(orchestratorService, logger)
	router := httpHandler.NewRouter(orchestratorHandler, metricsRegistry)
	orchestratorApp := &OrchestratorApp{
		OrchestratorService: orchestratorService,
		Handler:             orchestratorHandler,
		Router:              router,
		Metrics:             metricsRegistry,
		Database:            database,
	}
	return orchestratorApp, func() {
	}, nil
}
