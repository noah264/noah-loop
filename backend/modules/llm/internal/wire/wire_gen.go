// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject

package wire

import (
	"github.com/noah-loop/backend/modules/llm/internal/application/service"
	"github.com/noah-loop/backend/modules/llm/internal/infrastructure/repository"
	httpHandler "github.com/noah-loop/backend/modules/llm/internal/interface/http"
	"github.com/noah-loop/backend/shared/pkg/infrastructure"
)

// Injectors from wire.go:

func InitializeLLMApp() (*LLMApp, func(), error) {
	config, err := infrastructure.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, err := infrastructure.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	database, err := infrastructure.ProvideDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	modelRepository := repository.NewGormModelRepository(database)
	requestRepository := repository.NewGormRequestRepository(database)
	v := _wireValue
	metricsRegistry := infrastructure.ProvideMetrics("llm", logger)
	llmService := service.NewLLMService(modelRepository, requestRepository, v, logger, metricsRegistry)
	llmHandler := httpHandler.NewLLMHandler(llmService, logger)
	router := httpHandler.NewRouter(llmHandler, metricsRegistry)
	llmApp := &LLMApp{
		LLMService: llmService,
		Handler:    llmHandler,
		Router:     router,
		Metrics:    metricsRegistry,
		Database:   database,
	}
	return llmApp, func() {
	}, nil
}

var (
	_wireValue = (interface{})(nil)
)
