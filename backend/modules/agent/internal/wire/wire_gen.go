// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject

package wire

import (
	"github.com/noah-loop/backend/modules/agent/internal/infrastructure/executors"
	httpHandler "github.com/noah-loop/backend/modules/agent/internal/interface/http"
	"github.com/noah-loop/backend/modules/agent/internal/infrastructure/repository"
	"github.com/noah-loop/backend/shared/pkg/infrastructure"
)

// Injectors from wire.go:

func InitializeAgentApp() (*AgentApp, func(), error) {
	config, err := infrastructure.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, err := infrastructure.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	database, err := infrastructure.ProvideDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	agentRepository := repository.NewGormAgentRepository(database)
	toolRepository := repository.NewGormToolRepository(database)
	toolExecutionRepository := repository.NewGormToolExecutionRepository(database)
	v := _wireValue
	metricsRegistry := infrastructure.ProvideMetrics("agent", logger)
	toolExecutor := executors.NewCalculatorExecutor()
	agentService := NewAgentServiceWithExecutors(agentRepository, toolRepository, toolExecutionRepository, v, logger, metricsRegistry, toolExecutor)
	agentHandler := httpHandler.NewAgentHandler(agentService, logger)
	router := httpHandler.NewRouter(agentHandler, metricsRegistry)
	agentApp := &AgentApp{
		AgentService: agentService,
		Handler:      agentHandler,
		Router:       router,
		Metrics:      metricsRegistry,
		Database:     database,
	}
	return agentApp, func() {
	}, nil
}

var (
	_wireValue = (interface{})(nil)
)
