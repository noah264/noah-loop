// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject

package wire

import (
	"github.com/noah-loop/backend/modules/mcp/internal/application/service"
	httpHandler "github.com/noah-loop/backend/modules/mcp/internal/interface/http"
	"github.com/noah-loop/backend/modules/mcp/internal/infrastructure/repository"
	"github.com/noah-loop/backend/shared/pkg/infrastructure"
)

// Injectors from wire.go:

func InitializeMCPApp() (*MCPApp, func(), error) {
	config, err := infrastructure.ProvideConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, err := infrastructure.ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	database, err := infrastructure.ProvideDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	sessionRepository := repository.NewGormSessionRepository(database)
	contextRepository := repository.NewGormContextRepository(database)
	v := _wireValue
	metricsRegistry := infrastructure.ProvideMetrics("mcp", logger)
	mcpService := NewMCPServiceWithMetrics(sessionRepository, contextRepository, v, logger, metricsRegistry)
	mcpHandler := httpHandler.NewMCPHandler(mcpService, logger)
	router := httpHandler.NewRouter(mcpHandler, metricsRegistry)
	mcpApp := &MCPApp{
		MCPService: mcpService,
		Handler:    mcpHandler,
		Router:     router,
		Metrics:    metricsRegistry,
		Database:   database,
	}
	return mcpApp, func() {
	}, nil
}

var (
	_wireValue = (interface{})(nil)
)
