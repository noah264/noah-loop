# Multi-stage build for Orchestrator service
FROM golang:1.21-alpine AS builder

# 安装必要的工具
RUN apk add --no-cache git ca-certificates tzdata

# 设置工作目录
WORKDIR /app

# 复制 go 模块文件
COPY backend/go.work backend/go.work.sum ./
COPY backend/modules/orchestrator/go.mod backend/modules/orchestrator/go.sum ./backend/modules/orchestrator/
COPY backend/shared/go.mod backend/shared/go.sum ./backend/shared/

# 下载依赖
WORKDIR /app/backend/modules/orchestrator
RUN go mod download

# 复制源代码
WORKDIR /app
COPY backend/modules/orchestrator ./backend/modules/orchestrator
COPY backend/shared ./backend/shared

# 构建应用
WORKDIR /app/backend/modules/orchestrator
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o orchestrator ./cmd/main.go

# Runtime stage
FROM alpine:3.18

# 安装 ca-certificates 和工具
RUN apk --no-cache add ca-certificates tzdata curl

# 创建非 root 用户
RUN addgroup -g 65534 -S appgroup && \
    adduser -u 65534 -S appuser -G appgroup

WORKDIR /app

# 从构建阶段复制二进制文件
COPY --from=builder /app/backend/modules/orchestrator/orchestrator .

# 创建配置和工作流目录
RUN mkdir -p /app/configs /app/workflows && \
    chown -R appuser:appgroup /app

# 复制配置文件模板
COPY backend/configs/config.yaml ./configs/

# 切换到非 root 用户
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8084/health || exit 1

# 暴露端口
EXPOSE 8084 9094

# 启动应用
CMD ["./orchestrator"]
